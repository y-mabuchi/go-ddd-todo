// Code generated by MockGen. DO NOT EDIT.
// Source: task.go

// Package mock_infra is a generated GoMock package.
package mock_infra

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/y-mabuchi/go-ddd-todo/domain"
)

// MockTaskRepositoryInterface is a mock of TaskRepositoryInterface interface.
type MockTaskRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryInterfaceMockRecorder
}

// MockTaskRepositoryInterfaceMockRecorder is the mock recorder for MockTaskRepositoryInterface.
type MockTaskRepositoryInterfaceMockRecorder struct {
	mock *MockTaskRepositoryInterface
}

// NewMockTaskRepositoryInterface creates a new mock instance.
func NewMockTaskRepositoryInterface(ctrl *gomock.Controller) *MockTaskRepositoryInterface {
	mock := &MockTaskRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepositoryInterface) EXPECT() *MockTaskRepositoryInterfaceMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockTaskRepositoryInterface) FindById(id int) (*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTaskRepositoryInterfaceMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).FindById), id)
}

// Save mocks base method.
func (m *MockTaskRepositoryInterface) Save(task *domain.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTaskRepositoryInterfaceMockRecorder) Save(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTaskRepositoryInterface)(nil).Save), task)
}
