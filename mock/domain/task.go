// Code generated by MockGen. DO NOT EDIT.
// Source: task.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskInterface is a mock of TaskInterface interface.
type MockTaskInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTaskInterfaceMockRecorder
}

// MockTaskInterfaceMockRecorder is the mock recorder for MockTaskInterface.
type MockTaskInterfaceMockRecorder struct {
	mock *MockTaskInterface
}

// NewMockTaskInterface creates a new mock instance.
func NewMockTaskInterface(ctrl *gomock.Controller) *MockTaskInterface {
	mock := &MockTaskInterface{ctrl: ctrl}
	mock.recorder = &MockTaskInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskInterface) EXPECT() *MockTaskInterfaceMockRecorder {
	return m.recorder
}

// Postpone mocks base method.
func (m *MockTaskInterface) Postpone() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Postpone")
	ret0, _ := ret[0].(error)
	return ret0
}

// Postpone indicates an expected call of Postpone.
func (mr *MockTaskInterfaceMockRecorder) Postpone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Postpone", reflect.TypeOf((*MockTaskInterface)(nil).Postpone))
}
